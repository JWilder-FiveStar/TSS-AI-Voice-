plugins {
    id 'java'
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.runelite.net'
        content {
            includeGroupByRegex("net\\.runelite.*")
        }
    }
    mavenCentral()
}

group = 'com.example'
version = '1.0-SNAPSHOT'

java {
    toolchain {
    languageVersion = JavaLanguageVersion.of(11)
    }
}

dependencies {
    // Build against the same RuneLite client version observed at runtime (1.11.15)
    compileOnly 'net.runelite:client:1.11.15'

    implementation 'com.amazonaws:aws-java-sdk-polly:1.12.300'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
    implementation 'org.apache.commons:commons-configuration2:2.10.1'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // For the dev runner in test sources
    testImplementation 'net.runelite:client:1.11.15'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(11)
}

jar {
    // Keep it as a thin jar; RuneLite loads it and supplies dependencies
    manifest {
        attributes('Main-Class': 'com.example.osrstts.OsrsTtsPlugin')
    }
}

// Build an uber/fat jar for local external plugin loading by RuneLite
tasks.register('fatJar', Jar) {
    dependsOn configurations.runtimeClasspath, jar
    archiveClassifier.set('all')
    archiveFileName.set("${project.name}-${project.version}-all.jar")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from sourceSets.main.output
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude 'META-INF/INDEX.LIST'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude '**/module-info.class'

    manifest {
        attributes('Main-Class': 'com.example.osrstts.OsrsTtsPlugin', 'Multi-Release': true)
    }
}

// Dev-run task that mirrors the template's run-test approach
tasks.register('runPlugin', JavaExec) {
    group = 'run'
    description = 'Launch RuneLite with this plugin loaded via ExternalPluginManager (template-style)'
    dependsOn testClasses
    mainClass = 'com.example.osrstts.OsrsTtsPluginTest'
    classpath = sourceSets.test.runtimeClasspath
    jvmArgs '-ea', '-Duser.country=US', '-Duser.language=en', '-Xmx1024m'
}
